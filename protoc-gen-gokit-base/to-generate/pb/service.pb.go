// Code generated by protoc-gen-go.
// source: service.proto
// DO NOT EDIT!

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gengo/grpc-gateway/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ServiceStatus int32

const (
	ServiceStatus_FAIL ServiceStatus = 0
	ServiceStatus_OK   ServiceStatus = 1
)

var ServiceStatus_name = map[int32]string{
	0: "FAIL",
	1: "OK",
}
var ServiceStatus_value = map[string]int32{
	"FAIL": 0,
	"OK":   1,
}

func (x ServiceStatus) String() string {
	return proto.EnumName(ServiceStatus_name, int32(x))
}
func (ServiceStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type StatusRequest struct {
	Full bool `protobuf:"varint,1,opt,name=full" json:"full,omitempty"`
}

func (m *StatusRequest) Reset()                    { *m = StatusRequest{} }
func (m *StatusRequest) String() string            { return proto.CompactTextString(m) }
func (*StatusRequest) ProtoMessage()               {}
func (*StatusRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{0} }

type StatusResponse struct {
	Status ServiceStatus `protobuf:"varint,1,opt,name=status,enum=pb.ServiceStatus" json:"status,omitempty"`
}

func (m *StatusResponse) Reset()                    { *m = StatusResponse{} }
func (m *StatusResponse) String() string            { return proto.CompactTextString(m) }
func (*StatusResponse) ProtoMessage()               {}
func (*StatusResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{1} }

type PingRequest struct {
}

func (m *PingRequest) Reset()                    { *m = PingRequest{} }
func (m *PingRequest) String() string            { return proto.CompactTextString(m) }
func (*PingRequest) ProtoMessage()               {}
func (*PingRequest) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{2} }

type PingResponse struct {
	Status ServiceStatus `protobuf:"varint,1,opt,name=status,enum=pb.ServiceStatus" json:"status,omitempty"`
}

func (m *PingResponse) Reset()                    { *m = PingResponse{} }
func (m *PingResponse) String() string            { return proto.CompactTextString(m) }
func (*PingResponse) ProtoMessage()               {}
func (*PingResponse) Descriptor() ([]byte, []int) { return fileDescriptor1, []int{3} }

func init() {
	proto.RegisterType((*StatusRequest)(nil), "pb.StatusRequest")
	proto.RegisterType((*StatusResponse)(nil), "pb.StatusResponse")
	proto.RegisterType((*PingRequest)(nil), "pb.PingRequest")
	proto.RegisterType((*PingResponse)(nil), "pb.PingResponse")
	proto.RegisterEnum("pb.ServiceStatus", ServiceStatus_name, ServiceStatus_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for CurrencyExchangeService service

type CurrencyExchangeServiceClient interface {
	// / Return a particuar exchange rate for a currency
	ExchangeRateGetRate(ctx context.Context, in *ExchangeRateGetRateRequest, opts ...grpc.CallOption) (*ExchangeRateGetRateResponse, error)
	// / Convert an amount in one currency to another at an exchage rate
	ExchangeRateConvert(ctx context.Context, in *ExchangeRateConvertRequest, opts ...grpc.CallOption) (*ExchangeRateConvertResponse, error)
	// / Get the status of the service
	Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
	// / Ping the server
	Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error)
}

type currencyExchangeServiceClient struct {
	cc *grpc.ClientConn
}

func NewCurrencyExchangeServiceClient(cc *grpc.ClientConn) CurrencyExchangeServiceClient {
	return &currencyExchangeServiceClient{cc}
}

func (c *currencyExchangeServiceClient) ExchangeRateGetRate(ctx context.Context, in *ExchangeRateGetRateRequest, opts ...grpc.CallOption) (*ExchangeRateGetRateResponse, error) {
	out := new(ExchangeRateGetRateResponse)
	err := grpc.Invoke(ctx, "/pb.CurrencyExchangeService/ExchangeRateGetRate", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyExchangeServiceClient) ExchangeRateConvert(ctx context.Context, in *ExchangeRateConvertRequest, opts ...grpc.CallOption) (*ExchangeRateConvertResponse, error) {
	out := new(ExchangeRateConvertResponse)
	err := grpc.Invoke(ctx, "/pb.CurrencyExchangeService/ExchangeRateConvert", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyExchangeServiceClient) Status(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	out := new(StatusResponse)
	err := grpc.Invoke(ctx, "/pb.CurrencyExchangeService/Status", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *currencyExchangeServiceClient) Ping(ctx context.Context, in *PingRequest, opts ...grpc.CallOption) (*PingResponse, error) {
	out := new(PingResponse)
	err := grpc.Invoke(ctx, "/pb.CurrencyExchangeService/Ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for CurrencyExchangeService service

type CurrencyExchangeServiceServer interface {
	// / Return a particuar exchange rate for a currency
	ExchangeRateGetRate(context.Context, *ExchangeRateGetRateRequest) (*ExchangeRateGetRateResponse, error)
	// / Convert an amount in one currency to another at an exchage rate
	ExchangeRateConvert(context.Context, *ExchangeRateConvertRequest) (*ExchangeRateConvertResponse, error)
	// / Get the status of the service
	Status(context.Context, *StatusRequest) (*StatusResponse, error)
	// / Ping the server
	Ping(context.Context, *PingRequest) (*PingResponse, error)
}

func RegisterCurrencyExchangeServiceServer(s *grpc.Server, srv CurrencyExchangeServiceServer) {
	s.RegisterService(&_CurrencyExchangeService_serviceDesc, srv)
}

func _CurrencyExchangeService_ExchangeRateGetRate_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeRateGetRateRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyExchangeServiceServer).ExchangeRateGetRate(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CurrencyExchangeService/ExchangeRateGetRate",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyExchangeServiceServer).ExchangeRateGetRate(ctx, req.(*ExchangeRateGetRateRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyExchangeService_ExchangeRateConvert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ExchangeRateConvertRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyExchangeServiceServer).ExchangeRateConvert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CurrencyExchangeService/ExchangeRateConvert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyExchangeServiceServer).ExchangeRateConvert(ctx, req.(*ExchangeRateConvertRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyExchangeService_Status_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyExchangeServiceServer).Status(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CurrencyExchangeService/Status",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyExchangeServiceServer).Status(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CurrencyExchangeService_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CurrencyExchangeServiceServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.CurrencyExchangeService/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CurrencyExchangeServiceServer).Ping(ctx, req.(*PingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _CurrencyExchangeService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.CurrencyExchangeService",
	HandlerType: (*CurrencyExchangeServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ExchangeRateGetRate",
			Handler:    _CurrencyExchangeService_ExchangeRateGetRate_Handler,
		},
		{
			MethodName: "ExchangeRateConvert",
			Handler:    _CurrencyExchangeService_ExchangeRateConvert_Handler,
		},
		{
			MethodName: "Status",
			Handler:    _CurrencyExchangeService_Status_Handler,
		},
		{
			MethodName: "Ping",
			Handler:    _CurrencyExchangeService_Ping_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func init() { proto.RegisterFile("service.proto", fileDescriptor1) }

var fileDescriptor1 = []byte{
	// 335 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x94, 0x52, 0xcd, 0x4e, 0xfa, 0x40,
	0x10, 0xff, 0xc3, 0x1f, 0x0b, 0x8e, 0x16, 0x70, 0x30, 0x6a, 0x1a, 0xe2, 0x47, 0xbd, 0xa8, 0x07,
	0x9a, 0xe0, 0x45, 0xe3, 0x45, 0x43, 0xd4, 0x18, 0x4d, 0x34, 0xf0, 0x00, 0xa6, 0x90, 0xb5, 0x36,
	0x21, 0xbb, 0x75, 0x77, 0x4b, 0xf4, 0xa8, 0xaf, 0xe0, 0xa3, 0xf9, 0x0a, 0x3e, 0x88, 0xed, 0x76,
	0xaa, 0x8d, 0x82, 0x89, 0x27, 0xe8, 0xef, 0x73, 0x3a, 0x53, 0xb0, 0x15, 0x93, 0x93, 0x70, 0xc4,
	0x3a, 0x91, 0x14, 0x5a, 0x60, 0x39, 0x1a, 0x3a, 0x2d, 0xf6, 0x38, 0xba, 0xf7, 0x79, 0xc0, 0x6e,
	0xa5, 0xaf, 0x89, 0x70, 0xda, 0x81, 0x10, 0xc1, 0x98, 0x79, 0x7e, 0x14, 0x7a, 0x3e, 0xe7, 0x42,
	0xfb, 0x3a, 0x14, 0x5c, 0x65, 0xac, 0xbb, 0x0d, 0xf6, 0x20, 0x41, 0x62, 0xd5, 0x67, 0x0f, 0x31,
	0x53, 0x1a, 0x11, 0x2a, 0x77, 0xf1, 0x78, 0xbc, 0x56, 0xda, 0x2c, 0xed, 0xd4, 0xfa, 0xe6, 0xbf,
	0x7b, 0x04, 0xf5, 0x5c, 0xa4, 0xa2, 0xc4, 0xcb, 0x70, 0x17, 0x2c, 0x65, 0x10, 0xa3, 0xab, 0x77,
	0x97, 0x3a, 0xd1, 0xb0, 0x33, 0xc8, 0x06, 0x22, 0x29, 0x09, 0x5c, 0x1b, 0x16, 0x6e, 0x42, 0x1e,
	0x50, 0xbe, 0x7b, 0x08, 0x8b, 0xd9, 0xe3, 0x9f, 0x93, 0xf6, 0xb6, 0x92, 0x59, 0x8b, 0x04, 0xd6,
	0xa0, 0x72, 0x76, 0x72, 0x71, 0xd5, 0xfc, 0x87, 0x16, 0x94, 0xaf, 0x2f, 0x9b, 0xa5, 0xee, 0xf3,
	0x7f, 0x58, 0xed, 0xc5, 0x52, 0x32, 0x3e, 0x7a, 0x3a, 0xa5, 0x65, 0x90, 0x07, 0x35, 0xb4, 0x72,
	0xa8, 0x9f, 0xac, 0xe7, 0x9c, 0xe9, 0xf4, 0x07, 0xd7, 0xd3, 0xc2, 0x29, 0x04, 0x0d, 0xec, 0x6c,
	0xcc, 0xe4, 0xb3, 0x37, 0x70, 0xdb, 0x2f, 0x6f, 0xef, 0xaf, 0xe5, 0x15, 0x5c, 0xf6, 0xa6, 0xc5,
	0x7f, 0x6b, 0xed, 0x09, 0x3e, 0x61, 0x52, 0xff, 0x6c, 0x25, 0x62, 0x66, 0xeb, 0x27, 0xff, 0x6b,
	0x6b, 0x1e, 0x7f, 0x0c, 0x16, 0xed, 0x28, 0xdb, 0x67, 0xf1, 0xc4, 0x0e, 0x16, 0x21, 0x8a, 0x6b,
	0x98, 0xb8, 0x79, 0xac, 0x7a, 0xe4, 0x3b, 0x80, 0x4a, 0x7a, 0x27, 0x6c, 0xa4, 0xe2, 0xc2, 0x01,
	0x9d, 0xe6, 0x17, 0x40, 0x5e, 0xdb, 0x78, 0xab, 0x38, 0xe7, 0xa5, 0xf0, 0xd0, 0x32, 0x5f, 0xd6,
	0xfe, 0x47, 0x00, 0x00, 0x00, 0xff, 0xff, 0x43, 0x91, 0xd7, 0x0a, 0xa1, 0x02, 0x00, 0x00,
}
