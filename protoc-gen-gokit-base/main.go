package main

import (
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"text/template"

	"github.com/golang/glog"
	"github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/protoc-gen-go/descriptor"
	plugin "github.com/golang/protobuf/protoc-gen-go/plugin"
)

// parseReq reads io.Reader r into memory and attempts to marshal
// that input into a protobuf plugin CodeGeneratorRequest
func parseReq(r io.Reader) (*plugin.CodeGeneratorRequest, error) {
	glog.V(1).Info("Parsing code generator request")
	input, err := ioutil.ReadAll(r)
	if err != nil {
		glog.Errorf("Failed to read code generator request: %v", err)
		return nil, err
	}
	req := new(plugin.CodeGeneratorRequest)
	if err = proto.Unmarshal(input, req); err != nil {
		glog.Errorf("Failed to unmarshal code generator request: %v", err)
		return nil, err
	}
	glog.V(1).Info("Parsed code generator request")
	return req, nil
}

type empty struct{}

var (
	response = string("")
)

func logf(format string, args ...interface{}) {
	response += fmt.Sprintf(format, args...)
	fmt.Fprintf(os.Stderr, format, args...)
}

func main() {

	defer glog.Flush()
	glog.V(1).Info("Processing code generator request")
	req, err := parseReq(os.Stdin)
	if err != nil {
		glog.Fatal(err)
	}

	glog.V(1).Info("Building Output")

	_ = req

	var codeGenFiles []*plugin.CodeGeneratorResponse_File
	for _, file := range AssetNames() {
		logf("%v\n", file)
		curResponseFile := plugin.CodeGeneratorResponse_File{}

		d := string(file)
		curResponseFile.Name = &d
		logf("%v\n", curResponseFile.Name)

		bytesOfFile, _ := Asset(file)

		stringFile := string(bytesOfFile)

		curResponseFile.Content = &stringFile
		codeGenFiles = append(codeGenFiles, &curResponseFile)
	}

	for i, codeGenF := range codeGenFiles {
		logf("file %v\n", i)
		logf("%v\n", codeGenF.Name)
	}

	output := &plugin.CodeGeneratorResponse{
		File: codeGenFiles,
	}

	buf, err := proto.Marshal(output)
	if err != nil {
		glog.Fatal(err)
	}

	if _, err := os.Stdout.Write(buf); err != nil {
		glog.Fatal(err)
	}
}

var mainTemplate = template.Must(template.New("main").Parse(`
// Code generated by protoc-gen-gokit-base
// source
// DO NOT EDIT!

package main

import (
	"fmt"
	stdlog "log"
	"math/rand"
	"net"
	"os"
	"os/signal"
	"strconv"
	"syscall"
	"time"

	"github.com/go-kit/kit/log"
	"github.com/go-kit/kit/log/levels"

	"github.com/TuneLab/gob/protoc-gen-gokit-base/to-generate/controller"
	"github.com/TuneLab/gob/protoc-gen-gokit-base/to-generate/pb"
	"github.com/TuneLab/gob/protoc-gen-gokit-base/to-generate/server"

	"google.golang.org/grpc"
)

func main() {

	// Set up logging for errors and other details
	var logger levels.Levels
	{
		// Log to Stdout
		klogger := log.NewJSONLogger(os.Stdout)
		logger = levels.New(klogger)
		// Take normal logs and put them into logger
		stdlog.SetFlags(0)                              // flags are handled by Go kit's logger
		stdlog.SetOutput(log.NewStdlibAdapter(klogger)) // redirect anything using stdlib log to us
	}

	// All fatal errors go on this channel
	errc := make(chan error)

	// Take system interupts and pass them to the errc channel to be logged (ex. Ctrl-C)
	go func() {
		errc <- interrupt()
	}()

	// Take logs out of the errc channel and log them crit
	defer logger.Crit().Log("fatal", <-errc)

	// Note that math/rand is seeded by rand.Seed(1) unless changed at some point in execution
	rand.Seed(time.Now().UnixNano())

	// Hook up controller
	ctrl := &controller.Controller{}

	// Business domain
	var svc server.CurrencyExchangeService
	{
		svc = pureCurrencyExchangeService{ctrl}
	}

	// Transport: gRPC
	if eval := os.Getenv("GRPC_PORT"); eval != "" {
		grpcPrt, _ := strconv.Atoi(eval)

		go func() {
			grpcAddr := fmt.Sprintf(":%d", grpcPrt)

			gopts := []grpc.ServerOption{}
			grpcServer := grpc.NewServer(gopts...) // uses its own, internal context

			ln, err := net.Listen("tcp", grpcAddr)
			if err != nil {
				errc <- err
				return
			}

			pb.RegisterCurrencyExchangeServiceServer(grpcServer, grpcBinding{svc})
			errc <- grpcServer.Serve(ln)
		}()
	}
}

func interrupt() error {
	c := make(chan os.Signal)
	signal.Notify(c, syscall.SIGINT, syscall.SIGTERM)
	return fmt.Errorf("%s", <-c)
}

`))
