// Code generated by protoc-gen-go.
// source: svc.proto
// DO NOT EDIT!

/*
Package TEST is a generated protocol buffer package.

It is generated from these files:
	svc.proto

It has these top-level messages:
	NestedTypeRequest
	NestedMessageA
	NestedMessageB
	NestedMessageC
	NestedTypeResponse
	MapTypeRequest
	NestedMapMessageA
	NestedMapMessageB
	NestedMapMessageC
	MapTypeResponse
	MapNestedMsg
*/
package TEST

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/TuneLab/go-truss/pbinfo/scrap/third_party/googleapis/google/api"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type EnumType int32

const (
	EnumType_A EnumType = 0
	EnumType_B EnumType = 1
	EnumType_C EnumType = 2
)

var EnumType_name = map[int32]string{
	0: "A",
	1: "B",
	2: "C",
}
var EnumType_value = map[string]int32{
	"A": 0,
	"B": 1,
	"C": 2,
}

func (x EnumType) String() string {
	return proto.EnumName(EnumType_name, int32(x))
}
func (EnumType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type NestedTypeRequest struct {
	A *NestedMessageA   `protobuf:"bytes,1,opt,name=A" json:"A,omitempty"`
	B []*NestedMessageB `protobuf:"bytes,17,rep,name=B" json:"B,omitempty"`
	C EnumType          `protobuf:"varint,18,opt,name=C,enum=TEST.EnumType" json:"C,omitempty"`
}

func (m *NestedTypeRequest) Reset()                    { *m = NestedTypeRequest{} }
func (m *NestedTypeRequest) String() string            { return proto.CompactTextString(m) }
func (*NestedTypeRequest) ProtoMessage()               {}
func (*NestedTypeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *NestedTypeRequest) GetA() *NestedMessageA {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *NestedTypeRequest) GetB() []*NestedMessageB {
	if m != nil {
		return m.B
	}
	return nil
}

type NestedMessageA struct {
	A *NestedMessageC `protobuf:"bytes,1,opt,name=A" json:"A,omitempty"`
}

func (m *NestedMessageA) Reset()                    { *m = NestedMessageA{} }
func (m *NestedMessageA) String() string            { return proto.CompactTextString(m) }
func (*NestedMessageA) ProtoMessage()               {}
func (*NestedMessageA) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *NestedMessageA) GetA() *NestedMessageC {
	if m != nil {
		return m.A
	}
	return nil
}

type NestedMessageB struct {
	A []*NestedMessageC `protobuf:"bytes,1,rep,name=A" json:"A,omitempty"`
}

func (m *NestedMessageB) Reset()                    { *m = NestedMessageB{} }
func (m *NestedMessageB) String() string            { return proto.CompactTextString(m) }
func (*NestedMessageB) ProtoMessage()               {}
func (*NestedMessageB) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *NestedMessageB) GetA() []*NestedMessageC {
	if m != nil {
		return m.A
	}
	return nil
}

type NestedMessageC struct {
	A int64 `protobuf:"varint,1,opt,name=A" json:"A,omitempty"`
}

func (m *NestedMessageC) Reset()                    { *m = NestedMessageC{} }
func (m *NestedMessageC) String() string            { return proto.CompactTextString(m) }
func (*NestedMessageC) ProtoMessage()               {}
func (*NestedMessageC) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type NestedTypeResponse struct {
	A *NestedMessageA   `protobuf:"bytes,16,opt,name=A" json:"A,omitempty"`
	B []*NestedMessageB `protobuf:"bytes,17,rep,name=B" json:"B,omitempty"`
	C EnumType          `protobuf:"varint,18,opt,name=C,enum=TEST.EnumType" json:"C,omitempty"`
}

func (m *NestedTypeResponse) Reset()                    { *m = NestedTypeResponse{} }
func (m *NestedTypeResponse) String() string            { return proto.CompactTextString(m) }
func (*NestedTypeResponse) ProtoMessage()               {}
func (*NestedTypeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *NestedTypeResponse) GetA() *NestedMessageA {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *NestedTypeResponse) GetB() []*NestedMessageB {
	if m != nil {
		return m.B
	}
	return nil
}

type MapTypeRequest struct {
	A   *NestedMapMessageA   `protobuf:"bytes,1,opt,name=A" json:"A,omitempty"`
	B   []*NestedMapMessageB `protobuf:"bytes,2,rep,name=B" json:"B,omitempty"`
	AA  map[string]float64   `protobuf:"bytes,11,rep,name=AA" json:"AA,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	BB  map[string]float32   `protobuf:"bytes,12,rep,name=BB" json:"BB,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	CC  map[string]int32     `protobuf:"bytes,13,rep,name=CC" json:"CC,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	DD  map[string]int64     `protobuf:"bytes,14,rep,name=DD" json:"DD,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	EE  map[string]uint32    `protobuf:"bytes,15,rep,name=EE" json:"EE,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	FF  map[string]uint64    `protobuf:"bytes,16,rep,name=FF" json:"FF,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	GG  map[string]int32     `protobuf:"bytes,17,rep,name=GG" json:"GG,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"zigzag32,2,opt,name=value"`
	HH  map[string]int64     `protobuf:"bytes,18,rep,name=HH" json:"HH,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"zigzag64,2,opt,name=value"`
	II  map[string]uint32    `protobuf:"bytes,19,rep,name=II" json:"II,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	JJ  map[string]uint64    `protobuf:"bytes,20,rep,name=JJ" json:"JJ,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	KK  map[string]int32     `protobuf:"bytes,21,rep,name=KK" json:"KK,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	LL  map[string]bool      `protobuf:"bytes,22,rep,name=LL" json:"LL,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MM  map[string]string    `protobuf:"bytes,23,rep,name=MM" json:"MM,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AAA map[int64]float64    `protobuf:"bytes,31,rep,name=AAA" json:"AAA,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	BBB map[int64]float32    `protobuf:"bytes,32,rep,name=BBB" json:"BBB,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	CCC map[int64]int32      `protobuf:"bytes,33,rep,name=CCC" json:"CCC,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	DDD map[int64]int64      `protobuf:"bytes,34,rep,name=DDD" json:"DDD,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	EEE map[int64]uint32     `protobuf:"bytes,35,rep,name=EEE" json:"EEE,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	FFF map[int64]uint64     `protobuf:"bytes,36,rep,name=FFF" json:"FFF,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	GGG map[int64]int32      `protobuf:"bytes,37,rep,name=GGG" json:"GGG,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"zigzag32,2,opt,name=value"`
	HHH map[int64]int64      `protobuf:"bytes,38,rep,name=HHH" json:"HHH,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"zigzag64,2,opt,name=value"`
	III map[int64]uint32     `protobuf:"bytes,39,rep,name=III" json:"III,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	JJJ map[int64]uint64     `protobuf:"bytes,40,rep,name=JJJ" json:"JJJ,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	KKK map[int64]int32      `protobuf:"bytes,41,rep,name=KKK" json:"KKK,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	LLL map[int64]bool       `protobuf:"bytes,42,rep,name=LLL" json:"LLL,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MMM map[int64]string     `protobuf:"bytes,43,rep,name=MMM" json:"MMM,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *MapTypeRequest) Reset()                    { *m = MapTypeRequest{} }
func (m *MapTypeRequest) String() string            { return proto.CompactTextString(m) }
func (*MapTypeRequest) ProtoMessage()               {}
func (*MapTypeRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *MapTypeRequest) GetA() *NestedMapMessageA {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *MapTypeRequest) GetB() []*NestedMapMessageB {
	if m != nil {
		return m.B
	}
	return nil
}

func (m *MapTypeRequest) GetAA() map[string]float64 {
	if m != nil {
		return m.AA
	}
	return nil
}

func (m *MapTypeRequest) GetBB() map[string]float32 {
	if m != nil {
		return m.BB
	}
	return nil
}

func (m *MapTypeRequest) GetCC() map[string]int32 {
	if m != nil {
		return m.CC
	}
	return nil
}

func (m *MapTypeRequest) GetDD() map[string]int64 {
	if m != nil {
		return m.DD
	}
	return nil
}

func (m *MapTypeRequest) GetEE() map[string]uint32 {
	if m != nil {
		return m.EE
	}
	return nil
}

func (m *MapTypeRequest) GetFF() map[string]uint64 {
	if m != nil {
		return m.FF
	}
	return nil
}

func (m *MapTypeRequest) GetGG() map[string]int32 {
	if m != nil {
		return m.GG
	}
	return nil
}

func (m *MapTypeRequest) GetHH() map[string]int64 {
	if m != nil {
		return m.HH
	}
	return nil
}

func (m *MapTypeRequest) GetII() map[string]uint32 {
	if m != nil {
		return m.II
	}
	return nil
}

func (m *MapTypeRequest) GetJJ() map[string]uint64 {
	if m != nil {
		return m.JJ
	}
	return nil
}

func (m *MapTypeRequest) GetKK() map[string]int32 {
	if m != nil {
		return m.KK
	}
	return nil
}

func (m *MapTypeRequest) GetLL() map[string]bool {
	if m != nil {
		return m.LL
	}
	return nil
}

func (m *MapTypeRequest) GetMM() map[string]string {
	if m != nil {
		return m.MM
	}
	return nil
}

func (m *MapTypeRequest) GetAAA() map[int64]float64 {
	if m != nil {
		return m.AAA
	}
	return nil
}

func (m *MapTypeRequest) GetBBB() map[int64]float32 {
	if m != nil {
		return m.BBB
	}
	return nil
}

func (m *MapTypeRequest) GetCCC() map[int64]int32 {
	if m != nil {
		return m.CCC
	}
	return nil
}

func (m *MapTypeRequest) GetDDD() map[int64]int64 {
	if m != nil {
		return m.DDD
	}
	return nil
}

func (m *MapTypeRequest) GetEEE() map[int64]uint32 {
	if m != nil {
		return m.EEE
	}
	return nil
}

func (m *MapTypeRequest) GetFFF() map[int64]uint64 {
	if m != nil {
		return m.FFF
	}
	return nil
}

func (m *MapTypeRequest) GetGGG() map[int64]int32 {
	if m != nil {
		return m.GGG
	}
	return nil
}

func (m *MapTypeRequest) GetHHH() map[int64]int64 {
	if m != nil {
		return m.HHH
	}
	return nil
}

func (m *MapTypeRequest) GetIII() map[int64]uint32 {
	if m != nil {
		return m.III
	}
	return nil
}

func (m *MapTypeRequest) GetJJJ() map[int64]uint64 {
	if m != nil {
		return m.JJJ
	}
	return nil
}

func (m *MapTypeRequest) GetKKK() map[int64]int32 {
	if m != nil {
		return m.KKK
	}
	return nil
}

func (m *MapTypeRequest) GetLLL() map[int64]bool {
	if m != nil {
		return m.LLL
	}
	return nil
}

func (m *MapTypeRequest) GetMMM() map[int64]string {
	if m != nil {
		return m.MMM
	}
	return nil
}

type NestedMapMessageA struct {
	A *NestedMapMessageC `protobuf:"bytes,1,opt,name=A" json:"A,omitempty"`
}

func (m *NestedMapMessageA) Reset()                    { *m = NestedMapMessageA{} }
func (m *NestedMapMessageA) String() string            { return proto.CompactTextString(m) }
func (*NestedMapMessageA) ProtoMessage()               {}
func (*NestedMapMessageA) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *NestedMapMessageA) GetA() *NestedMapMessageC {
	if m != nil {
		return m.A
	}
	return nil
}

type NestedMapMessageB struct {
	A []*NestedMapMessageC `protobuf:"bytes,1,rep,name=A" json:"A,omitempty"`
}

func (m *NestedMapMessageB) Reset()                    { *m = NestedMapMessageB{} }
func (m *NestedMapMessageB) String() string            { return proto.CompactTextString(m) }
func (*NestedMapMessageB) ProtoMessage()               {}
func (*NestedMapMessageB) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *NestedMapMessageB) GetA() []*NestedMapMessageC {
	if m != nil {
		return m.A
	}
	return nil
}

type NestedMapMessageC struct {
	A map[string]string `protobuf:"bytes,1,rep,name=A" json:"A,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *NestedMapMessageC) Reset()                    { *m = NestedMapMessageC{} }
func (m *NestedMapMessageC) String() string            { return proto.CompactTextString(m) }
func (*NestedMapMessageC) ProtoMessage()               {}
func (*NestedMapMessageC) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *NestedMapMessageC) GetA() map[string]string {
	if m != nil {
		return m.A
	}
	return nil
}

type MapTypeResponse struct {
	A   *NestedMapMessageA   `protobuf:"bytes,1,opt,name=A" json:"A,omitempty"`
	B   []*NestedMapMessageB `protobuf:"bytes,2,rep,name=B" json:"B,omitempty"`
	AA  map[string]float64   `protobuf:"bytes,11,rep,name=AA" json:"AA,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	BB  map[string]float32   `protobuf:"bytes,12,rep,name=BB" json:"BB,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	CC  map[string]int32     `protobuf:"bytes,13,rep,name=CC" json:"CC,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	DD  map[string]int64     `protobuf:"bytes,14,rep,name=DD" json:"DD,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	EE  map[string]uint32    `protobuf:"bytes,15,rep,name=EE" json:"EE,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	FF  map[string]uint64    `protobuf:"bytes,16,rep,name=FF" json:"FF,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	GG  map[string]int32     `protobuf:"bytes,17,rep,name=GG" json:"GG,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"zigzag32,2,opt,name=value"`
	HH  map[string]int64     `protobuf:"bytes,18,rep,name=HH" json:"HH,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"zigzag64,2,opt,name=value"`
	II  map[string]uint32    `protobuf:"bytes,19,rep,name=II" json:"II,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	JJ  map[string]uint64    `protobuf:"bytes,20,rep,name=JJ" json:"JJ,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	KK  map[string]int32     `protobuf:"bytes,21,rep,name=KK" json:"KK,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	LL  map[string]bool      `protobuf:"bytes,22,rep,name=LL" json:"LL,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MM  map[string]string    `protobuf:"bytes,23,rep,name=MM" json:"MM,omitempty" protobuf_key:"bytes,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
	AAA map[int64]float64    `protobuf:"bytes,31,rep,name=AAA" json:"AAA,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	BBB map[int64]float32    `protobuf:"bytes,32,rep,name=BBB" json:"BBB,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	CCC map[int64]int32      `protobuf:"bytes,33,rep,name=CCC" json:"CCC,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	DDD map[int64]int64      `protobuf:"bytes,34,rep,name=DDD" json:"DDD,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	EEE map[int64]uint32     `protobuf:"bytes,35,rep,name=EEE" json:"EEE,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	FFF map[int64]uint64     `protobuf:"bytes,36,rep,name=FFF" json:"FFF,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	GGG map[int64]int32      `protobuf:"bytes,37,rep,name=GGG" json:"GGG,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"zigzag32,2,opt,name=value"`
	HHH map[int64]int64      `protobuf:"bytes,38,rep,name=HHH" json:"HHH,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"zigzag64,2,opt,name=value"`
	III map[int64]uint32     `protobuf:"bytes,39,rep,name=III" json:"III,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	JJJ map[int64]uint64     `protobuf:"bytes,40,rep,name=JJJ" json:"JJJ,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed64,2,opt,name=value"`
	KKK map[int64]int32      `protobuf:"bytes,41,rep,name=KKK" json:"KKK,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"fixed32,2,opt,name=value"`
	LLL map[int64]bool       `protobuf:"bytes,42,rep,name=LLL" json:"LLL,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"varint,2,opt,name=value"`
	MMM map[int64]string     `protobuf:"bytes,43,rep,name=MMM" json:"MMM,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *MapTypeResponse) Reset()                    { *m = MapTypeResponse{} }
func (m *MapTypeResponse) String() string            { return proto.CompactTextString(m) }
func (*MapTypeResponse) ProtoMessage()               {}
func (*MapTypeResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *MapTypeResponse) GetA() *NestedMapMessageA {
	if m != nil {
		return m.A
	}
	return nil
}

func (m *MapTypeResponse) GetB() []*NestedMapMessageB {
	if m != nil {
		return m.B
	}
	return nil
}

func (m *MapTypeResponse) GetAA() map[string]float64 {
	if m != nil {
		return m.AA
	}
	return nil
}

func (m *MapTypeResponse) GetBB() map[string]float32 {
	if m != nil {
		return m.BB
	}
	return nil
}

func (m *MapTypeResponse) GetCC() map[string]int32 {
	if m != nil {
		return m.CC
	}
	return nil
}

func (m *MapTypeResponse) GetDD() map[string]int64 {
	if m != nil {
		return m.DD
	}
	return nil
}

func (m *MapTypeResponse) GetEE() map[string]uint32 {
	if m != nil {
		return m.EE
	}
	return nil
}

func (m *MapTypeResponse) GetFF() map[string]uint64 {
	if m != nil {
		return m.FF
	}
	return nil
}

func (m *MapTypeResponse) GetGG() map[string]int32 {
	if m != nil {
		return m.GG
	}
	return nil
}

func (m *MapTypeResponse) GetHH() map[string]int64 {
	if m != nil {
		return m.HH
	}
	return nil
}

func (m *MapTypeResponse) GetII() map[string]uint32 {
	if m != nil {
		return m.II
	}
	return nil
}

func (m *MapTypeResponse) GetJJ() map[string]uint64 {
	if m != nil {
		return m.JJ
	}
	return nil
}

func (m *MapTypeResponse) GetKK() map[string]int32 {
	if m != nil {
		return m.KK
	}
	return nil
}

func (m *MapTypeResponse) GetLL() map[string]bool {
	if m != nil {
		return m.LL
	}
	return nil
}

func (m *MapTypeResponse) GetMM() map[string]string {
	if m != nil {
		return m.MM
	}
	return nil
}

func (m *MapTypeResponse) GetAAA() map[int64]float64 {
	if m != nil {
		return m.AAA
	}
	return nil
}

func (m *MapTypeResponse) GetBBB() map[int64]float32 {
	if m != nil {
		return m.BBB
	}
	return nil
}

func (m *MapTypeResponse) GetCCC() map[int64]int32 {
	if m != nil {
		return m.CCC
	}
	return nil
}

func (m *MapTypeResponse) GetDDD() map[int64]int64 {
	if m != nil {
		return m.DDD
	}
	return nil
}

func (m *MapTypeResponse) GetEEE() map[int64]uint32 {
	if m != nil {
		return m.EEE
	}
	return nil
}

func (m *MapTypeResponse) GetFFF() map[int64]uint64 {
	if m != nil {
		return m.FFF
	}
	return nil
}

func (m *MapTypeResponse) GetGGG() map[int64]int32 {
	if m != nil {
		return m.GGG
	}
	return nil
}

func (m *MapTypeResponse) GetHHH() map[int64]int64 {
	if m != nil {
		return m.HHH
	}
	return nil
}

func (m *MapTypeResponse) GetIII() map[int64]uint32 {
	if m != nil {
		return m.III
	}
	return nil
}

func (m *MapTypeResponse) GetJJJ() map[int64]uint64 {
	if m != nil {
		return m.JJJ
	}
	return nil
}

func (m *MapTypeResponse) GetKKK() map[int64]int32 {
	if m != nil {
		return m.KKK
	}
	return nil
}

func (m *MapTypeResponse) GetLLL() map[int64]bool {
	if m != nil {
		return m.LLL
	}
	return nil
}

func (m *MapTypeResponse) GetMMM() map[int64]string {
	if m != nil {
		return m.MMM
	}
	return nil
}

type MapNestedMsg struct {
	Beta map[int64]*NestedMessageA `protobuf:"bytes,2,rep,name=Beta" json:"Beta,omitempty" protobuf_key:"varint,1,opt,name=key" protobuf_val:"bytes,2,opt,name=value"`
}

func (m *MapNestedMsg) Reset()                    { *m = MapNestedMsg{} }
func (m *MapNestedMsg) String() string            { return proto.CompactTextString(m) }
func (*MapNestedMsg) ProtoMessage()               {}
func (*MapNestedMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *MapNestedMsg) GetBeta() map[int64]*NestedMessageA {
	if m != nil {
		return m.Beta
	}
	return nil
}

func init() {
	proto.RegisterType((*NestedTypeRequest)(nil), "TEST.NestedTypeRequest")
	proto.RegisterType((*NestedMessageA)(nil), "TEST.NestedMessageA")
	proto.RegisterType((*NestedMessageB)(nil), "TEST.NestedMessageB")
	proto.RegisterType((*NestedMessageC)(nil), "TEST.NestedMessageC")
	proto.RegisterType((*NestedTypeResponse)(nil), "TEST.NestedTypeResponse")
	proto.RegisterType((*MapTypeRequest)(nil), "TEST.MapTypeRequest")
	proto.RegisterType((*NestedMapMessageA)(nil), "TEST.NestedMapMessageA")
	proto.RegisterType((*NestedMapMessageB)(nil), "TEST.NestedMapMessageB")
	proto.RegisterType((*NestedMapMessageC)(nil), "TEST.NestedMapMessageC")
	proto.RegisterType((*MapTypeResponse)(nil), "TEST.MapTypeResponse")
	proto.RegisterType((*MapNestedMsg)(nil), "TEST.MapNestedMsg")
	proto.RegisterEnum("TEST.EnumType", EnumType_name, EnumType_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion3

// Client API for Map service

type MapClient interface {
	GetMap(ctx context.Context, in *MapTypeRequest, opts ...grpc.CallOption) (*MapTypeResponse, error)
	PostMap(ctx context.Context, in *MapTypeRequest, opts ...grpc.CallOption) (*MapTypeRequest, error)
	GetNested(ctx context.Context, in *NestedTypeRequest, opts ...grpc.CallOption) (*NestedTypeResponse, error)
	PostNested(ctx context.Context, in *NestedTypeRequest, opts ...grpc.CallOption) (*NestedTypeRequest, error)
}

type mapClient struct {
	cc *grpc.ClientConn
}

func NewMapClient(cc *grpc.ClientConn) MapClient {
	return &mapClient{cc}
}

func (c *mapClient) GetMap(ctx context.Context, in *MapTypeRequest, opts ...grpc.CallOption) (*MapTypeResponse, error) {
	out := new(MapTypeResponse)
	err := grpc.Invoke(ctx, "/TEST.Map/GetMap", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapClient) PostMap(ctx context.Context, in *MapTypeRequest, opts ...grpc.CallOption) (*MapTypeRequest, error) {
	out := new(MapTypeRequest)
	err := grpc.Invoke(ctx, "/TEST.Map/PostMap", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapClient) GetNested(ctx context.Context, in *NestedTypeRequest, opts ...grpc.CallOption) (*NestedTypeResponse, error) {
	out := new(NestedTypeResponse)
	err := grpc.Invoke(ctx, "/TEST.Map/GetNested", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *mapClient) PostNested(ctx context.Context, in *NestedTypeRequest, opts ...grpc.CallOption) (*NestedTypeRequest, error) {
	out := new(NestedTypeRequest)
	err := grpc.Invoke(ctx, "/TEST.Map/PostNested", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Map service

type MapServer interface {
	GetMap(context.Context, *MapTypeRequest) (*MapTypeResponse, error)
	PostMap(context.Context, *MapTypeRequest) (*MapTypeRequest, error)
	GetNested(context.Context, *NestedTypeRequest) (*NestedTypeResponse, error)
	PostNested(context.Context, *NestedTypeRequest) (*NestedTypeRequest, error)
}

func RegisterMapServer(s *grpc.Server, srv MapServer) {
	s.RegisterService(&_Map_serviceDesc, srv)
}

func _Map_GetMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapServer).GetMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TEST.Map/GetMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapServer).GetMap(ctx, req.(*MapTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Map_PostMap_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MapTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapServer).PostMap(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TEST.Map/PostMap",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapServer).PostMap(ctx, req.(*MapTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Map_GetNested_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NestedTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapServer).GetNested(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TEST.Map/GetNested",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapServer).GetNested(ctx, req.(*NestedTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Map_PostNested_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NestedTypeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MapServer).PostNested(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TEST.Map/PostNested",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MapServer).PostNested(ctx, req.(*NestedTypeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Map_serviceDesc = grpc.ServiceDesc{
	ServiceName: "TEST.Map",
	HandlerType: (*MapServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMap",
			Handler:    _Map_GetMap_Handler,
		},
		{
			MethodName: "PostMap",
			Handler:    _Map_PostMap_Handler,
		},
		{
			MethodName: "GetNested",
			Handler:    _Map_GetNested_Handler,
		},
		{
			MethodName: "PostNested",
			Handler:    _Map_PostNested_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: fileDescriptor0,
}

func init() { proto.RegisterFile("svc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 1232 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xec, 0x99, 0xdd, 0x52, 0x23, 0x45,
	0x1f, 0x87, 0xdf, 0x49, 0xf3, 0x31, 0xf4, 0xf2, 0x11, 0xe6, 0x05, 0xb7, 0x8b, 0xc2, 0x59, 0x8c,
	0xa2, 0x88, 0x4e, 0x18, 0x71, 0x9d, 0xb2, 0x38, 0x9b, 0xef, 0x6f, 0xcb, 0x8a, 0xdc, 0x40, 0xd4,
	0x29, 0x6a, 0xcb, 0x35, 0x89, 0x9b, 0xb0, 0x16, 0x1e, 0x7a, 0x03, 0x1e, 0x78, 0x15, 0x5e, 0x8f,
	0x5e, 0x82, 0xe7, 0xde, 0x82, 0xf5, 0x9f, 0xf4, 0xc0, 0x9f, 0x61, 0xba, 0x5b, 0xab, 0xf4, 0xc0,
	0x2a, 0x8e, 0x60, 0xc9, 0xf3, 0x9b, 0xce, 0x86, 0x67, 0xc9, 0xc3, 0x2c, 0xdd, 0x98, 0xbf, 0xfe,
	0x6a, 0x38, 0x7b, 0x35, 0x5d, 0x4c, 0x8d, 0x95, 0xcb, 0xf0, 0x8b, 0xcb, 0x83, 0xc3, 0xab, 0xe9,
	0xf4, 0xea, 0x65, 0x75, 0x36, 0x9e, 0xbd, 0x38, 0x1b, 0x4f, 0x26, 0xd3, 0xc5, 0x78, 0xf1, 0x62,
	0x3a, 0x99, 0x2f, 0x99, 0xc1, 0x0d, 0xdd, 0xfd, 0xac, 0x9a, 0x2f, 0xaa, 0xaf, 0x2f, 0x6f, 0x66,
	0xd5, 0xa8, 0xfa, 0xee, 0xba, 0x9a, 0x2f, 0x8c, 0x01, 0xd5, 0x5c, 0xa6, 0x1d, 0x69, 0x27, 0x4f,
	0xce, 0xf7, 0x86, 0x70, 0x91, 0xe1, 0x92, 0x29, 0xab, 0xf9, 0x7c, 0x7c, 0x55, 0xb9, 0x23, 0xcd,
	0x05, 0xc6, 0x63, 0xbb, 0x47, 0x44, 0xc0, 0x78, 0x23, 0xcd, 0x33, 0x0e, 0xa9, 0xe6, 0x33, 0xe3,
	0x48, 0x3b, 0xd9, 0x3e, 0xdf, 0x5e, 0x32, 0xe1, 0xe4, 0xfa, 0xdb, 0xfa, 0x24, 0xcd, 0x1f, 0x3c,
	0xa7, 0xdb, 0xf7, 0x2f, 0xab, 0x3a, 0xd7, 0x1f, 0x69, 0xee, 0x83, 0x95, 0xd7, 0xac, 0x88, 0x6c,
	0x65, 0xb6, 0x56, 0xbe, 0xb1, 0xd9, 0x9c, 0x45, 0xe0, 0xf1, 0x1f, 0xa8, 0x81, 0x5f, 0x86, 0xf9,
	0x6c, 0x3a, 0x99, 0x57, 0xcb, 0x2b, 0xf7, 0xff, 0xed, 0xd7, 0xe1, 0xb7, 0x7d, 0xba, 0x5d, 0x8e,
	0x67, 0xf8, 0x1b, 0x70, 0x7c, 0xf7, 0x42, 0x3c, 0xbd, 0x77, 0xd1, 0xf1, 0x0c, 0x9f, 0x7d, 0x0c,
	0x67, 0xf7, 0xea, 0xb3, 0x05, 0x58, 0x7d, 0xfc, 0x87, 0xb4, 0xe7, 0xba, 0xec, 0x49, 0xcd, 0x1d,
	0x2e, 0xb9, 0xfb, 0xe7, 0x0d, 0x5d, 0x37, 0x9c, 0x2c, 0x5e, 0xdd, 0x8c, 0x7a, 0xae, 0x0b, 0xb4,
	0xe7, 0xb1, 0x4d, 0x09, 0xed, 0x79, 0x9c, 0xf6, 0xea, 0x6b, 0xfb, 0x3e, 0xdb, 0x92, 0xd0, 0xbe,
	0xcf, 0x69, 0xdf, 0x07, 0x3a, 0x08, 0xd8, 0xb6, 0x84, 0x0e, 0x02, 0x4e, 0x07, 0x01, 0xd0, 0x61,
	0xc8, 0x76, 0x24, 0x74, 0x18, 0x72, 0x3a, 0x0c, 0x81, 0x8e, 0x22, 0xd6, 0x97, 0xd0, 0x51, 0xc4,
	0xe9, 0x28, 0x02, 0x3a, 0x8e, 0xf9, 0xf7, 0xad, 0x9b, 0x8e, 0x63, 0x4e, 0xc7, 0x31, 0xd0, 0x49,
	0xc2, 0x0c, 0x09, 0x9d, 0x24, 0x9c, 0x4e, 0x12, 0xa0, 0xd3, 0x94, 0xfd, 0x5f, 0x42, 0xa7, 0x29,
	0xa7, 0xd3, 0x14, 0xe8, 0x2c, 0x63, 0x7b, 0x12, 0x3a, 0xcb, 0x38, 0x9d, 0x65, 0x40, 0xe7, 0x39,
	0xdb, 0x97, 0xd0, 0x79, 0xce, 0xe9, 0x3c, 0x07, 0xba, 0x28, 0xd8, 0x1b, 0x12, 0xba, 0x28, 0x38,
	0x5d, 0x14, 0x40, 0x97, 0x25, 0x7b, 0x2a, 0xa1, 0xcb, 0x92, 0xd3, 0x65, 0x69, 0x9c, 0x51, 0xe2,
	0xba, 0x2e, 0x7b, 0x56, 0xe3, 0x6f, 0x0a, 0xb4, 0xe2, 0x5e, 0x01, 0x09, 0x03, 0xcf, 0xf3, 0xd8,
	0x91, 0x64, 0xe0, 0x35, 0x6a, 0x01, 0x09, 0x03, 0xdf, 0xf7, 0xd9, 0x5b, 0x92, 0x81, 0xdf, 0xd8,
	0x05, 0x24, 0x0c, 0x82, 0x20, 0x60, 0x03, 0xc9, 0x20, 0x68, 0x04, 0x03, 0x12, 0x06, 0x61, 0x18,
	0xb2, 0xb7, 0x25, 0x83, 0xb0, 0x71, 0x0c, 0x48, 0x18, 0x44, 0x51, 0xc4, 0xde, 0x91, 0x0c, 0xa2,
	0x46, 0x33, 0x20, 0x61, 0x10, 0xc7, 0x31, 0x3b, 0x96, 0x0c, 0xe2, 0xc6, 0x34, 0x20, 0x61, 0x90,
	0x24, 0x09, 0x7b, 0x57, 0x32, 0x48, 0x1a, 0xd9, 0x80, 0x84, 0x41, 0x9a, 0xa6, 0xec, 0x3d, 0xc9,
	0x20, 0x6d, 0x7c, 0x03, 0x12, 0x06, 0x59, 0x96, 0xb1, 0x13, 0xc9, 0x20, 0x6b, 0x94, 0x03, 0x12,
	0x06, 0x79, 0x9e, 0xb3, 0xf7, 0x25, 0x83, 0xbc, 0xb1, 0x0e, 0x48, 0x18, 0x14, 0x45, 0xc1, 0x4e,
	0x25, 0x83, 0xa2, 0x11, 0x0f, 0x48, 0x18, 0x94, 0x65, 0xc9, 0x3e, 0x90, 0x0c, 0xca, 0xc6, 0x3d,
	0x20, 0x0f, 0x3e, 0xa1, 0xeb, 0xdc, 0x2d, 0xa3, 0x4f, 0xc9, 0x37, 0xd5, 0x4d, 0xfd, 0xd3, 0x72,
	0x63, 0x04, 0x9f, 0x1a, 0x7b, 0x74, 0xf5, 0xf5, 0xf8, 0xe5, 0x75, 0xc5, 0x7a, 0x47, 0xda, 0x89,
	0x36, 0x5a, 0xfe, 0xe1, 0xa2, 0xf7, 0xa9, 0x06, 0x33, 0x6e, 0x98, 0x6a, 0xd6, 0x6b, 0xcd, 0xb8,
	0x67, 0xaa, 0xd9, 0x6a, 0x6b, 0xc6, 0x6d, 0x53, 0xcd, 0x48, 0x6b, 0xc6, 0x9d, 0x53, 0xcd, 0xb6,
	0x5a, 0x33, 0x6e, 0x9e, 0x6a, 0xb6, 0xd2, 0x9a, 0x71, 0xff, 0x54, 0xb3, 0xdd, 0xd6, 0x8c, 0x5b,
	0xa8, 0x9a, 0x19, 0xad, 0x19, 0x77, 0x51, 0x35, 0x5b, 0x6f, 0xcd, 0xb8, 0x91, 0xaa, 0xd9, 0x5a,
	0x6b, 0xc6, 0xbd, 0x54, 0xcd, 0x76, 0x5a, 0x33, 0x6e, 0xa7, 0x6a, 0xa6, 0xb7, 0x66, 0xdc, 0x51,
	0xd5, 0x6c, 0x03, 0xcf, 0x1c, 0xaa, 0xbb, 0x1d, 0x2e, 0x13, 0x95, 0xcb, 0x0e, 0xd5, 0xbd, 0x0e,
	0x99, 0x89, 0x4a, 0x66, 0x87, 0xea, 0x7e, 0x87, 0xcd, 0x44, 0x65, 0xb3, 0x43, 0xf5, 0xa0, 0x43,
	0x67, 0xa2, 0xd2, 0xd9, 0xa1, 0x7a, 0xd8, 0xe1, 0x33, 0x51, 0xf9, 0xec, 0x50, 0x3d, 0xea, 0x10,
	0x9a, 0xa8, 0x84, 0x76, 0xa8, 0x1e, 0x77, 0x18, 0x4d, 0x54, 0x46, 0x3b, 0x54, 0x4f, 0x3a, 0x94,
	0x26, 0x2a, 0xa5, 0x1d, 0xaa, 0xa7, 0x1d, 0x4e, 0x13, 0x95, 0xd3, 0x0e, 0xd5, 0xb3, 0x0e, 0xa9,
	0x89, 0x4a, 0x6a, 0x87, 0xea, 0x79, 0x87, 0xd5, 0x44, 0x65, 0xb5, 0x43, 0xf5, 0xa2, 0x43, 0x6b,
	0xa2, 0xd2, 0xda, 0xa1, 0x7a, 0xd9, 0xe1, 0x35, 0x51, 0x78, 0x3d, 0xb8, 0x68, 0x7e, 0xb3, 0x40,
	0xd1, 0xfa, 0x17, 0xc2, 0xb6, 0xce, 0xf5, 0x8e, 0xad, 0xd7, 0x6c, 0x89, 0x62, 0xfb, 0xfd, 0xc3,
	0x2d, 0x84, 0xe7, 0xed, 0xd6, 0x14, 0x6c, 0x87, 0xbc, 0x55, 0x34, 0xf7, 0xe0, 0x39, 0x5d, 0x73,
	0xff, 0xf6, 0x3f, 0xe4, 0xc1, 0x1f, 0xfb, 0x74, 0xe7, 0xf6, 0x4d, 0x8b, 0xff, 0x06, 0xf1, 0xcf,
	0x86, 0xbc, 0x85, 0x42, 0xbe, 0xfd, 0x2e, 0xb9, 0x3c, 0xf0, 0x5e, 0xc9, 0x5b, 0xa8, 0xe4, 0x05,
	0x38, 0x4e, 0x79, 0x0b, 0xa5, 0xbc, 0x00, 0xc7, 0x2d, 0x6f, 0xa1, 0x96, 0x17, 0xe0, 0x38, 0xe6,
	0x2d, 0x14, 0xf3, 0x02, 0x1c, 0xd7, 0xbc, 0x85, 0x6a, 0x5e, 0x80, 0xe3, 0x9c, 0xb7, 0x50, 0xce,
	0x0b, 0x70, 0xdc, 0xf3, 0x16, 0xea, 0x79, 0x01, 0x8e, 0x83, 0xde, 0x42, 0x41, 0x2f, 0xc0, 0x71,
	0xd1, 0x5b, 0xa8, 0xe8, 0x05, 0x38, 0x4e, 0x7a, 0x0b, 0x25, 0xbd, 0x00, 0xc7, 0x4d, 0x6f, 0xa1,
	0xa6, 0x17, 0xe0, 0x38, 0xea, 0x2d, 0x14, 0xf5, 0x02, 0x1c, 0x57, 0xbd, 0x8d, 0xab, 0xde, 0x14,
	0x39, 0x86, 0xb3, 0xde, 0xc6, 0x59, 0x6f, 0x8a, 0x34, 0xc3, 0x5d, 0x6f, 0xe3, 0xae, 0x37, 0x45,
	0xa6, 0xe1, 0xb0, 0xb7, 0x71, 0xd8, 0x9b, 0x22, 0xd9, 0x70, 0xd9, 0xdb, 0xb8, 0xec, 0x4d, 0xa1,
	0x6f, 0x28, 0xed, 0x6d, 0x9c, 0xf6, 0xa6, 0x48, 0x39, 0xdc, 0xf6, 0x36, 0x6e, 0x7b, 0x53, 0x64,
	0x1d, 0x8e, 0x7b, 0x1b, 0xc7, 0xbd, 0x29, 0x12, 0x0f, 0xd7, 0xbd, 0x8d, 0xeb, 0xde, 0x14, 0xb9,
	0x87, 0xf3, 0xde, 0xc6, 0x79, 0x6f, 0x8a, 0xf4, 0xc3, 0x7d, 0x6f, 0xe3, 0xbe, 0x37, 0x45, 0x06,
	0xe2, 0xc0, 0xb7, 0x71, 0xe0, 0x9b, 0x22, 0x09, 0x71, 0xe1, 0xdb, 0xb8, 0xf0, 0x4d, 0x91, 0x87,
	0x8f, 0x89, 0xff, 0x98, 0xf8, 0x8f, 0x89, 0xff, 0x98, 0xf8, 0x8f, 0x89, 0xff, 0x9f, 0x48, 0xfc,
	0x9f, 0x34, 0xba, 0x59, 0x8e, 0x67, 0xbc, 0x55, 0xe7, 0x57, 0x86, 0x4d, 0x57, 0xbc, 0x6a, 0x31,
	0xe6, 0x29, 0x7b, 0x77, 0x0f, 0xf1, 0x96, 0x18, 0xc2, 0xc3, 0xcb, 0x1f, 0xf2, 0x35, 0x79, 0x50,
	0xd2, 0x8d, 0xdb, 0x2f, 0x75, 0x9c, 0x7d, 0x8a, 0xcf, 0x16, 0xdd, 0x85, 0xbf, 0x7b, 0x46, 0xa7,
	0xcf, 0xa8, 0xde, 0xdc, 0x5a, 0x37, 0x56, 0xa9, 0xe6, 0xf6, 0xff, 0x07, 0x1f, 0xbc, 0xbe, 0x06,
	0x1f, 0xfc, 0x7e, 0xef, 0xfc, 0x97, 0x1e, 0x25, 0xe5, 0x78, 0x66, 0xb8, 0x74, 0x2d, 0xae, 0x16,
	0xf0, 0xd9, 0x5e, 0xd7, 0xed, 0xa6, 0x83, 0xfd, 0xce, 0xb7, 0xa8, 0x01, 0xfd, 0xf1, 0xd7, 0xdf,
	0x7f, 0xee, 0xad, 0x18, 0xbd, 0xb3, 0x8f, 0x8c, 0x80, 0xae, 0x7f, 0x3e, 0x9d, 0x4b, 0xae, 0xd1,
	0xf9, 0xd5, 0xc1, 0x56, 0x7d, 0x89, 0xf5, 0x41, 0xef, 0xec, 0xfc, 0x42, 0x3b, 0x35, 0x32, 0xba,
	0x11, 0x57, 0x8b, 0xe5, 0xdf, 0xc8, 0xb8, 0x17, 0xff, 0xf8, 0x52, 0xec, 0xe1, 0x03, 0x1d, 0xcf,
	0xa8, 0xa4, 0x14, 0x9e, 0x91, 0xea, 0x62, 0xa2, 0x07, 0x5a, 0x4f, 0xed, 0xcb, 0xb5, 0xfa, 0xbf,
	0x88, 0x3e, 0xfe, 0x33, 0x00, 0x00, 0xff, 0xff, 0x56, 0xdd, 0x29, 0xb1, 0x53, 0x1a, 0x00, 0x00,
}
