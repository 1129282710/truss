package handler

// This file contains the Service definition, and a basic service
// implementation. It also includes service middlewares.

import (
	_ "errors"
	_ "time"

	"golang.org/x/net/context"

	_ "github.com/go-kit/kit/log"
	_ "github.com/go-kit/kit/metrics"

	pb "{{.ImportPath -}}"
)



// NewService returns a na√Øve, stateless implementation of Service.
func NewService() Service {
	return {{.PackageName}}Service{}
}

type {{.PackageName}}Service struct{}

{{with $Executor := .}}
{{with $PackageName := $Executor.PackageName}}

{{range $i := $Executor.Service.Methods}}
// {{$i.GetName}} implements Service.
func (s {{$PackageName}}Service) {{$i.GetName}}(ctx context.Context, in *pb.{{GoName $i.RequestType.GetName}}) (*pb.{{GoName $i.ResponseType.GetName}}, error){
	_ = ctx
	_ = in
	response := pb.{{GoName $i.ResponseType.GetName}}{
		{{range $j := $i.ResponseType.Fields -}}
		// {{GoName $j.GetName }}: 
		{{end -}}
	}
	return &response, nil
}
{{end}}
{{- end}}
{{- end}}

type Service interface {
{{range $i := .Service.Methods}}
	{{$i.GetName}}(ctx context.Context, in *pb.{{GoName $i.RequestType.GetName}}) (*pb.{{GoName $i.ResponseType.GetName}}, error)
{{- end}}
}
