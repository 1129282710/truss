// Package grpc provides a gRPC client for the {{.Service.GetName}} service.
package grpc

import (
	"google.golang.org/grpc"

	"github.com/go-kit/kit/endpoint"
	grpctransport "github.com/go-kit/kit/transport/grpc"

	// This Service
	handler "{{.ImportPath -}} /handlers/server"
	svc "{{.ImportPath -}} /generated"
	pb "{{.PBImportPath -}}"
)

// New returns an service backed by a gRPC client connection. It is the
// responsibility of the caller to dial, and later close, the connection.
func New(conn *grpc.ClientConn) handler.Service {
	//options := []grpctransport.ServerOption{
		//grpctransport.ServerBefore(),
	//}

	{{- with $tE := .}}
		{{- range $i := $tE.Service.Methods}}
			var {{ToLower $i.GetName}}Endpoint endpoint.Endpoint
			{
				{{ToLower $i.GetName}}Endpoint = grpctransport.NewClient(
					conn,
					"{{TrimPrefix $tE.Service.FullyQualifiedName "."}}",
					"{{$i.GetName}}",
					svc.EncodeGRPC{{$i.GetName}}Request,
					svc.DecodeGRPC{{$i.GetName}}Response,
					pb.{{GoName $i.ResponseType.GetName}}{},
					//options...,
				).Endpoint()
			}
		{{end}}
	{{end}}

	return svc.Endpoints{
	{{range $i := .Service.Methods -}}
		{{$i.GetName}}Endpoint:    {{ToLower $i.GetName}}Endpoint,
	{{end}}
	}
}
