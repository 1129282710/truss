// Package http provides an HTTP client for the {{.Service.GetName}} service.

package http

import (
	"net/url"
	"strings"

	"github.com/go-kit/kit/endpoint"
	httptransport "github.com/go-kit/kit/transport/http"

	// This Service
	handler "{{.ImportPath -}} /handlers/server"
	svc "{{.ImportPath -}} /generated"
)

var (
	_ = endpoint.Chain
	_ = httptransport.NewClient
)

// New returns a service backed by an HTTP server living at the remote
// instance. We expect instance to come from a service discovery system, so
// likely of the form "host:port".
func New(instance string) (handler.Service, error) {
	//options := []httptransport.ServerOption{
		//httptransport.ServerBefore(),
	//}

	if !strings.HasPrefix(instance, "http") {
		instance = "http://" + instance
	}
	u, err := url.Parse(instance)
	if err != nil {
		return nil, err
	}
	_ = u

{{range $method := .HTTPHelper.Methods}}
	{{range $binding := $method.Bindings}}
		var {{$binding.Label}}Endpoint endpoint.Endpoint
		{
			{{$binding.Label}}Endpoint = httptransport.NewClient(
				"{{$binding.Verb}}",
				copyURL(u, "{{ToLower $binding.BasePath}}"),
				svc.EncodeHTTP{{$binding.Label}}Request,
				svc.DecodeHTTP{{$method.Name}}Response,
				//options...,
			).Endpoint()
		}
	{{- end}}
{{- end}}

	return svc.Endpoints{
	{{range $method := .HTTPHelper.Methods -}}
		{{range $binding := $method.Bindings -}}
			{{$method.Name}}Endpoint:    {{$binding.Label}}Endpoint,
		{{end}}
	{{- end}}
	}, nil
}

func copyURL(base *url.URL, path string) *url.URL {
	next := *base
	next.Path = path
	return &next
}

