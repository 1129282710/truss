package main

import (
	"encoding/json"
	"flag"
	"fmt"
	"os"
	"strconv"
	"strings"
	"time"

	"golang.org/x/net/context"
	"google.golang.org/grpc"

	"github.com/pkg/errors"

	// This Service
	handler "{{.ImportPath -}} /handlers/server"
	clientHandler "{{.ImportPath -}} /handlers/client"
	grpcclient "{{.ImportPath -}} /generated/client/grpc"
	httpclient "{{.ImportPath -}} /generated/client/http"
	pb "{{.PBImportPath -}}"
)

var (
	_ = strconv.ParseInt
	_ = strings.Split
	_ = json.Compact
	_ = errors.Wrapf
	_ = pb.Register{{.Service.GetName}}Server
)


func main() {
	// The addcli presumes no service discovery system, and expects users to
	// provide the direct address of an service. This presumption is reflected in
	// the cli binary and the the client packages: the -transport.addr flags
	// and various client constructors both expect host:port strings.

	var (
		httpAddr       = flag.String("http.addr", "", "HTTP address of addsvc")
		grpcAddr       = flag.String("grpc.addr", ":5040", "gRPC (HTTP) address of addsvc")
		method         = flag.String("method", "{{range $index, $i := .Service.Methods}}{{if $index}}{{else}}{{ToLower $i.GetName}}{{end}}{{end}}",	"{{range $index, $i := .Service.Methods}}{{if $index}},{{end}}{{ToLower $i.GetName}}{{end}}")
	)

	var (
		{{.ClientArgs.AllFlags}}
	)
	flag.Parse()


	var (
		service handler.Service
		err     error
	)
	if *httpAddr != "" {
		service, err = httpclient.New(*httpAddr)
	} else if *grpcAddr != "" {
		conn, err := grpc.Dial(*grpcAddr, grpc.WithInsecure(), grpc.WithTimeout(time.Second))
		if err != nil {
			fmt.Fprintf(os.Stderr, "Error while dialing grpc connection: %v", err)
			os.Exit(1)
		}
		defer conn.Close()
		service, err = grpcclient.New(conn)
	} else {
		fmt.Fprintf(os.Stderr, "error: no remote address specified\n")
		os.Exit(1)
	}
	if err != nil {
		fmt.Fprintf(os.Stderr, "error: %v\n", err)
		os.Exit(1)
	}

	switch *method {
{{ with $tE := .}}
	{{range $i := $tE.Service.Methods}}
		case "{{ToLower $i.GetName}}":
			{{- with index $tE.ClientArgs.MethArgs $i.GetName -}}
				var err error
				{{.MarshalFlags}}
			{{- end}}
			request, err := clientHandler.{{$i.GetName}}({{with index $tE.ClientArgs.MethArgs $i.GetName}}{{.CallArgs}}{{end}})
			if err != nil {
				fmt.Fprintf(os.Stderr, "Error calling clientHandler.{{$i.GetName}}: %v\n", err)
				os.Exit(1)
			}

			v, err := service.{{$i.GetName}}(context.Background(), request)
			if err != nil {
				fmt.Fprintf(os.Stderr, "Error calling service.{{$i.GetName}}: %v\n", err)
				os.Exit(1)
			}
			fmt.Println("Client Requested with:")
			fmt.Println({{with index $tE.ClientArgs.MethArgs $i.GetName}}{{.CallArgs}}{{end}})
			fmt.Println("Server Responded with:")
			fmt.Println(v)
	{{- end}}
{{- end}}
	default:
		fmt.Fprintf(os.Stderr, "error: invalid method %q\n", method)
		os.Exit(1)
	}
}

