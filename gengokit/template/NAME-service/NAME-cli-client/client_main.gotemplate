package main

import (
	"encoding/json"
	"flag"
	"fmt"
	"os"
	"strconv"
	"strings"
	"time"

	"golang.org/x/net/context"
	"google.golang.org/grpc"

	"github.com/pkg/errors"

	// This Service
	clientHandler "{{.ImportPath -}} /generated/cli/handlers"
	grpcclient "{{.ImportPath -}} /generated/client/grpc"
	httpclient "{{.ImportPath -}} /generated/client/http"
	pb "{{.PBImportPath -}}"
)

var (
	_ = strconv.ParseInt
	_ = strings.Split
	_ = json.Compact
	_ = errors.Wrapf
	_ = pb.Register{{.Service.Name}}Server
)


func main() {
	// The addcli presumes no service discovery system, and expects users to
	// provide the direct address of an service. This presumption is reflected in
	// the cli binary and the the client packages: the -transport.addr flags
	// and various client constructors both expect host:port strings.

	{{ range $meth, $args := .ClientArgs.MethArgs }}
	fs{{$meth}} := flag.NewFlagSet("{{ToLower $meth}}", flag.ExitOnError)
	var (
		{{$meth}}httpAddr       = fs{{$meth}}.String("http.addr", "", "HTTP address of addsvc")
		{{$meth}}grpcAddr       = fs{{$meth}}.String("grpc.addr", ":5040", "gRPC (HTTP) address of addsvc")
	)
	{{end}}

	var (
		{{.ClientArgs.AllFlags}}
	)

	flag.Usage = func() {
		fmt.Fprintf(os.Stderr, "Usage of %s:\n", os.Args[0])
		flag.PrintDefaults()
		fmt.Fprintf(os.Stderr, "Subcommands:\n")
	{{range $meth, $args := .ClientArgs.MethArgs }}
		fmt.Fprintf(os.Stderr, "  %s\n", "{{ToLower $meth}}")
	{{end}}
		fmt.Fprintf(os.Stderr, "\n")

	}
	if len(os.Args) < 2 {
		flag.Usage()
		os.Exit(1)
	}

	var (
		service pb.{{GoName .Service.Name}}Server
	)
	switch os.Args[1] {
{{range $meth, $args := .ClientArgs.MethArgs}}
	case "{{ToLower $meth}}":
		fs{{$meth}}.Parse(os.Args[2:])
		if len(os.Args) < 3 {
			fs{{$meth}}.PrintDefaults()
			os.Exit(1)
		}
		var err error
		{{$args.MarshalFlags}}
		httpAddr := {{$meth}}httpAddr
		grpcAddr := {{$meth}}grpcAddr
		if *httpAddr != "" {
			service, err = httpclient.New(*httpAddr)
		} else if *grpcAddr != "" {
			conn, err := grpc.Dial(*grpcAddr, grpc.WithInsecure(), grpc.WithTimeout(time.Second))
			if err != nil {
				fmt.Fprintf(os.Stderr, "Error while dialing grpc connection: %v", err)
				os.Exit(1)
			}
			defer conn.Close()
			service, err = grpcclient.New(conn)
		} else {
			fmt.Fprintf(os.Stderr, "error: no remote address specified\n")
			os.Exit(1)
		}
		if err != nil {
			fmt.Fprintf(os.Stderr, "error: %v\n", err)
			os.Exit(1)
		}
		request, err := clientHandler.{{$meth}}({{$args.CallArgs}})
		if err != nil {
			fmt.Fprintf(os.Stderr, "Error calling clientHandler.{{$meth}}: %v\n", err)
			os.Exit(1)
		}

		v, err := service.{{$meth}}(context.Background(), request)
		if err != nil {
			fmt.Fprintf(os.Stderr, "Error calling service.{{$meth}}: %v\n", err)
			os.Exit(1)
		}
		fmt.Println("Client Requested with:")
		fmt.Println({{$args.CallArgs}})
		fmt.Println("Server Responded with:")
		fmt.Println(v)
{{end}}
	default:
		flag.Parse()
		os.Exit(1)
	}
}

